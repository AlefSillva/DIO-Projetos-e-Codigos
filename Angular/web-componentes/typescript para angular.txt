

TYPESCRIPT PARA ANGULAR:

O QUE É TYPESCRIPT?:
é um tipo de superSet do JS, uma maneira de TUNAR o JS, acrescenta mais ferramentas. (JS com super-poderes)

Possibilita tipar o JS, tipar é dar tipo para uma variável. Declarar quais tipos uma váriável deve receber.

possibilita criar INTERFACES , contratos para que todos que trabalharem com o código terão de respeitar o que está escrito nesse contrato (escrito por mim)

pode ser usado em qlq lugar onde usariamos JS, no front, no back-end. 

o CÓDIGO FEITO EM TS passa por TRANSPILAÇÃO (tadução/conversão para o JS) 

O TS permite codar mais facilmente e tipar mais facil as variáveis. ( trás facilidade e previsibilidade do código)

A TRANSPILAÇÃO p/ JS é feita pelo NODE.

//--------------------------------------------------------------//

TIPOS DE VARIÁVEL:
// Tipos primitivos | boolean, string, number:
let ligado:boolean = false;
let nome: string = "alef";
let idade: number = 28;
let altura: number = 1.7;

//Tipos especiais | null e undefined:
let nulo : null = null;
let indefinido: underfined = undefined;

// Tipos abrangentes | any (qualquer coisa) e void (vazio) :
let retorno:void 
let retornoView: any =  ; // retorna qualquer coisa (tipos)


//--------------------------------------------------------------//
// "VARIÁVEL" DO TIPO OBJETO:
// Objeto - sem previsibilidade
let produto:object = { // não pode receber um numero, texto ou booleano. Somente um objeto, qualquer objeto
    name: 'Alef',
    cidade: 'SP',
    idade: 28,
} 

//--------------------------------------------------------------//
// Objeto "tipado" - com previsibilidade:
type ProdutoLoja = {
    nome: string;
    preco: number;
    unidades: number;
};

let meuProduto: ProdutoLoja = {
    nome: "Tênis",
    preco: 89.99,
    unidades: 5,
};


//--------------------------------------------------------------//
ARRAYS:
let dados: string[] = ["Alef", "ana", "vitória", "camila"]; // *** primeira forma de declarar um array em TypeScript ***

let dados2: Array<string> = ["Alef", "ana", "vitória", "camila"]; // *** segunda maneira de declarar um array em TS. ***


//--------------------------------------------------------------//
//ARRAYS DE MULTI-TIPOS:

let infos: (string / number)[] = ["Alef", 28, "Leeh"]; 
*** esse Vetor contem mais de um tipo, porém só aceita numeros e letras. ***

//--------------------------------------------------------------//
TUPLAS: é um vetor de multi-Types que aceita tipos diferentes de dados, porén ten de ser em ordem.

//--------------------------------------------------------------//
MÉTODOS DOS ARRAYS: Os métodos são os mesmo do JS.

//--------------------------------------------------------------//
DATES - (interface do tipo Date) [data]: ela permite armazenar data e hora.

 let aniversário:Date = new Date("2022-12-01 05:00");
console.log(aniversario.toString());

//--------------------------------------------------------------//
FUNÇÕES:

//funções:
function addNumber (x: number, y: number): number {
    return x + y;
}

function addToHello(name: string) {
    return `Hello ${name}`;
}

let soma: number = addNumber(4, 7);
console.log(addToHello('Alef'));

//--------------------------------------------------------------//
//FUNÇÕES MULTI TIPOS:
function CallToPhone(phone: number | string): number | string {
    return phone;
}

console.log(CallToPhone(942281389));

//--------------------------------------------------------------//
FUNÇÕES ASYNC (funções assíncronas):
Sempre que usarmos uma "async function" estaremos fazendo uma PROMISE e devemos declarar o tipo: "Promise<tipo-da-promise>"

ex:
async function getDatabase(id: number): Promise<string> {
    return "Leeh";
}
--------------------------
Podemos usar também dois tipos de valores na PROMISE: 

async function getDatabase(id: number): Promise<number | string> {
    return "Leeh";
}

//--------------------------------------------------------------//
INTERFACES (contratos): 
é bem parecida com o TYPE, a diferença que o type tipa um objeto 
ja a interface serve para trabalhar com classe.
 
todos que tiverem herdando da interface tem que seguir o "contrato" ouseja, possuir todos as informações dentro da interface.

//--------------------------------------------------------------//

CLASSES:
é um tipo de forma, que pode ser usado para criar outras coisas com o mesmo formato/molde, por ex: CARROS, contendo dentro da classe carros suas informações como: marca - ano - cor. Então sempre que for necessário a criação de um "new carro" iremos sempre usar as mesma propriedades, porém, com atributos individuais de cada carro.

MODIFICADORES DE ACESSO(data modifiers:
quem pode acessar um determinado dado da classe.

tipos:
public | private | protected

- public -  todos podem enxergar (alterar)

- private - um item da classe só pode ser acessado(alterado) através/dentro da propria classe

- protected - somente as classes e suas sub-classes tem acesso/alteração.

Data Modifiers também são aplicáveis em métodos.

//--------------------------------------------------------------//
SUBCLASSES:
classes que herdam de outra classe.

classe Pai(parent) sempre será: SUPERCLASS
classe Filha(child) sempre será: SUBCLASS

//--------------------------------------------------------------//

GENERICS:

ex:

function concatArray<T> (...itens: T[]): T[]{ // os três pontos antes do "itens" significa que aceita diversos itens.
    return new Array().concat(...itens);           // transformando em um único array
    
}

const numArray = concatArray([1,5], [3]);
const stgArray = concatArray(["Alef", "Goku"], ["vegeta"]);

console.log(numArray);
console.log(stgArray);

usando o ANY para receber os valores dos ARRAYS "(...itens: any[]): any[]{}" os valores poderiam se misturar entre as listas(arrays), porém se quisermos receber qualquer tipo de valor, mas cada um sendo puxado conforme seu tipo, podemos usar "<T>" (type) depois do nome da função, e substituir o tipo "ANY" por "T" (type) como foi feito quando colocamos "<T>".

e só especificamos o tipo por parametro que queremos que seja retornado, usando "<tipo[]>" antes do parenteses que possue o array, por ex: 

const numArray = concatArray  <number[]>  ([1,5], [3]);

const stgArray = concatArray  <string[]>  (["Alef", "Goku"], ["vegeta"]);

//--------------------------------------------------------------//

DECORATORS:
é quando decoramos uma função para agir conforme alguma determinada ação.

para decorar utilizamos o "@" e o nome do método.

por exemplo: 

function ExibirNome(target: any){
console.log(target);
}

@ExibirNome // DECORATOR: gatilho que execulta uma ação
class funcionario {}

//--------------------------------------------------------------//
CLASS DECORATORS:

function apiVersion (version: string){
    return (target: any) => {
        Object.assign(target.prototype, {__version: version})
    }
}

@apiVersion("1.10") // apesar de não declarada, a versão da API foi injetada através do decorator.
class Api{}

const api = new Api();
console.log(api.__version);

//--------------------------------------------------------------//


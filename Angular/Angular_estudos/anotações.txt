ANGULAR 

- é um framework baseado em JS

- Usa TypeScript como linguagem principal

- SPAs são seu foco: _aplicações baseadas em componentes_

simple pages aplication = só exibe uma unica pagina com tds os componentes de sua categoria, ex: na pagina de login só serão mostrados componentes do login.


- Componentes são a base da arquitetura

- Estrutura Organizada e bem deifinida: ele diz como devemos estruturar as pastas do projeto

- Sistema de Tooling muito rico: CLI, HTTP, Router:
possui várias ferramentas dentro de si mesmo.

-----------------------------------------------
ANGULAS JS & ANGULAR: 

são diferentes o Angular JS veio primeiro, (O "JS" veio depois que lançaram o ANGULAR novo, daí o antigo ganhou o "js") - foca em javascript puro

a partir da versão 2.0 já começou a usar TypeScript, possui ferramentas diferentes e é mais moderno (ANGULAR).

-----------------------------------------------
FOI CRIADO POR: Google

definido como Framework

trabalha com HTML + TS nos templates.

2 Way - Binding - ássa de pai para filho e vice-versa (caminhos): 

-----------------------------------------------
CAMADAS DE WEB APP:

- componentes: são blocos de códigos reaproveitáveis

- gerenciamento de estado: 

- roteamento: qual o conjunto de componentes devem ser mostrados ao acessar uma determinada rota ou url

- renderização: como os elementos são mostrados na tela

-----------------------------------------------

COMPONENTES:
É um elemento visual, cusotmizável e reutilizável

ex: um card na tela, botão

trabalhamos com partes isoladas de cada parte da página e reaproveitar o componentes de códigos p/ criar outros elementos semelhantes mudando somentes as info sem mexer na estrutura. (html e CSS isolados para cada elemento)


COMO MINHA APLICAÇÃO É MONTADA ?:
- através de "injeção de dependências" (não é um conceito totalmente ligado a componentes) 

- "Injeção de dependência" é um padrão de desenvolvimento utilizada em diversos cenários diferentes, é uma estratégia de desenvolvimento muito utilizada.

EX: é como se fosse um anticorpo injetado em nosso corpo para determinada doença (problema) - aplicação montada com injeções de soluções externas.
_________________________________________________

OBS: Componentes lógicos nao possuem VISUAL.

_________________________________________________
APP-ROOT:

recebe os componentes que são criados de maneira isolada e injeta no HTML



-----------------------------------------------
GERENCIAMENTO DE ESTADOS / STATES:

STATES: Responsável por garantir que as informações dos componentes não estão dessincronizadas e facilitar a comunicação de um componente com outro.

ex: Atualizar carrinho de compras ao clicar no botão de comprar de um produto.

-----------------------------------------------
ROTEAMENTO:

Routes ou Routing & Navigation: Responsável pela forma de navegar fazendo a troca de URL sem Recarregar a página, mudando somente os componentes que são mostrados.

ex:
meuapp/login - mostra os componentes da página de login
meuapp/home - mostra os componentes da página home

sem que a página seja atualizada, só mudando os componentes porém tudo na mesma página.

EXEMPLOS DE BIBLIOTECAS:
- History API:
nativo do navegador

- React-Router:
uma biblioteca instalada a parte para React

- Vue-Router
uma biblioteca instalada a parte para Vue

- Angular RoutingModule
uma biblioteca do ANGULAR

-----------------------------------------------
RENDERIZAÇÃO / RENDER:

Responsável por decidir a melhor maneira de acessar e entregar para o browser o componente pronto para que ele seja desenhado na tela sem complicações.

de acordo com a rota acessada - os componentes que devem ser mostrados na tela para essa rota - e o estado = renderização para o navegador

TIPOS DE RENDERIZAÇÃO:

Existem 3 tipos principais de estratégias de renderização 

- 100% server:
aplicação normal, entregando um documento HTML fixo e pronto de acordo com a rota acessada (já monstado no back-end) - carrega mais rápido as informações.

- Parte server e Parte Client:
algumas coisas são entregues pelo servidos e outras coisas montadas pelo lado do cliente

- 100% Client
o servidor não acessa nada tudo é montado do lado do cliente.
- desvantagens: não tem SEO pois é montado somente quando a pessoa acessa.

obs: ANGULAR trabalha por default em 100% client.

-----------------------------------------------
obs: modulo do angular é um agrupador.

_________________________________________________
INTERPOLAÇÃO DE DADOS:
transmitir dados p/ o HTML 

CLASSE É A PARTE INTELIGENTE DO COMPONENTE, ONDE DEFINIMOS PROPRIEDADES DENTRO DELA.

EX:

export class Button {
    buttonText: String = 'ACESSAR';
}

para acessar essa propriedade definida no código acima, lá no documento HTML usamos "{{nomedapropriedade}}" no caso o nome da PROP seria "buttonText" ficaria assim:

<div>
    <button>{{buttonText}}</button>
</div>

_________________________________________

Podemos definir uma propriedade para a classe exportada com um vetor(array) dentro dela:

ex:

export class NomeDaClasse {
buttonTexts: string[] = ['Carro', 'Moto'];
}

assim quando fosse usá-lo no HTML, poderia chamar um indice específico de um elemento dentro da lista, como por exemplo:

<button>{{buttonTexts[1}}</button> // nesse caso o item na primeira posição (carro) seria exibido como texto do botão.

__________________________________________________
Também é possível acessar objetos diretamente usando ".nomeDoObjeto":

export class NomeDaClasse {
buttonObject= {
    label: 'adicionar ao carrinho', // isso nomeará o botão com "adicionar o carrinho"
  }
}

e como o HTML é capaz de enxergar essas propriedades definidas ao chamarmos:

<button>{{buttonObject.label}</button>

O NOME DO BOTÃO MUDARIA PARA O DEFINIDO NA PROPRIEDADE DA CLASSE.

ESSE É CONCEITO DE INTERPOLAÇÃO DE DADOS, JOGAR CONCEITOS DA CLASSE PARA O HTML
______________________________________________________

ESTILIZAÇÃO:

DIFERENÇA ENTRE ESTILO GLOBAL & SCOPED:

O arquivo "STYLES.CSS" representa a estilização global do projeto, já o "SCOPED" só estiliza o componente especifico dele.

o Angular sempre dará preferencia ao SCOPED.

______________________________________________________
COMUNICAÇÃO DE COMPONENTE PAI P/ FILHO:

<my-button label='{{buttonLabel}}'></my-button>
 // component Pai usando label='{{nomeDoAtributo}}'
_________________________
<my-button [label]="buttonSecond"></my-button>
 // component filho usando o mesmo atributo "label" usando "[]" e aspas "Valor(nomeDoAtributo)"
__________________________
Já nesse caso, quando definimos o atributo sem "{{}}" o angular entende que é uma string e não uma variável, funcionando normalmente e sem ligação(conversar) com o component pai:

<my-button label='Notícia'></my-button>

______________________________________________________
4 MANEIRAS DE PASSAR VALORES PARA COMPONENTES:

Como no exemplo no tópico anterior:
 - label(sem colchetes) = "{{}}" tem o mesmo efeito que [label]="valor(nomeDoAtributo)"

 - label(sem colchetes) = "nomeDaPropriedade" tem o mesmo efeito que   [label]='valor(nomeDoAtributo)'	c/ aspas simples dentro de aspas duplas.

______________________________________________________

DATA BINGIND:

Podemos dizer que databinding é a comunicação entre a view e a lógica(js), quando atualizamos a lógica ela reflete na view.

Comparação de propriedades e atributos
Embora você possa definir tecnicamente a [attr.disabled]associação de atributo, os valores são diferentes, pois a associação de propriedade deve ser um valor booleano, enquanto a associação de atributo correspondente depende de o valor ser nullou não. Considere o seguinte:
  
  content_copy
  <input [disabled]="condition ? true : false">
  <input [attr.disabled]="condition ? 'disabled' : null">

______________________________________________________

<-- PARTES DO DATA BINDING: assiciação de dados -->

comunicação que vem da parte lógica(TypeScript) para o HTML:

  "HTML <------------------------ TypeScript"  

  - Interpolação: {{valor}} 

  - Property Binding: [propriedade]="valor"
_____________________________

comunicação que vem da parte visual(HTML) para o TypeScript:

  "HTML ------------------------> TypeScript"

- Event Binding: (evento) = "Handler"

_____________________________

comunicação de ambos os lados:
	------------------------>
  "HTML <------------------------ TYPESCRIPT"

- Two Way Data Binding: [(ngModel)] = "propriedade"

______________________________________________________
 USANDO AS 3 COISAS:

EX:

  <input type="text" 
  [value]="placeholder" // property biding
  (input)="placeholder = $any($event.target).value" // event biding
  />
  <p>{{placeholder}}</p> // Interpolação



